#The photographs were taken in controlled settings of 8 individuals and then the photographs were cropped and then they were converted to #gray and resized to a standard 100*100 using matlab.

#The data contained 262 images and it was spit into training, testing and validation with each containg 214, 24, 24 images #respectively

#The code to resize is as follows:

%    f=dir('G:\DataMiningData\Dataset\TrainingSet\*.jpg');
%        
%     for j=1:numel(f)    
%        I=double(imread(f(j).name));
%         I=reshape(I,[1 100*100]);
%         A(j,:)=I;
%        
%     end

# After the images was resized the images were normalized
#It was done  to remove the differing lighting effects of images

%% Normalization of images
% for i=1:size(A,1)
%     minimum=min(A(i,:));
%     maximum=max(A(i,:));
%     A(i,:)=(A(i,:)-minimum)*255/(maximum-minimum);
% end;

#The images mean are then calculated i.e. we take the mean across all the columns.
#It was done to remove the deviations of each image from this mean image. This is known as ‘Centering’.

% %%%Mean image
% meanImage=mean(A,1);
% imshow(uint8(reshape(meanImage,[100,100])))


%    %% centering
%  for i=1:size(A,1)
%    A(i,:)=A(i,:)-meanImage;
%  end

# Then the eigen values were calculated using the princomp function.
% [eigenVectors,score,eigenValues]=princomp(A);

#  Alternate way to find the eigenvectors U:

# Sometimes the covariance matrix A*A’ is huge so we find the inner product A’ * A which is a smaller matrix.

# (A’*A) * V= lambda * V 

#V is the eigenvectors of the inner product matrix.


# And U= lambda^0.5 * A *V
## Now U is the desired eigenVectors

# Then I chose the number of eigenvectors to keep 

%  NumberOfEigenFaceVectors = 25;
%  eigenVectors = eigenVectors(:, 1:NumberOfEigenFaceVectors);

#### Displayting the eigenvectors or eigenfaces
%%
% figure(1)
% title('Principal Components');
% for i=1:25
%     subplot(5,5,i);
%     imges=imagesc(reshape(eigenVectors(:,i),[100 100]));
%     
% end

# Then training images are projected onto the eigenface/ eigenvectors space by taking the inner product of
# the training image matrix with the eigenvector matrix

%  % Now  project the images onto the principal eigenvectors
%   TrainingProjectedOntoPrinComp = A * eigenVectors;
% % 

# Then I do resize the validation images
% h=dir('G:\DataMiningData\Dataset\ValidationSet\*.jpg');
% for j=1:numel(h);
%     V=double(imread(h(j).name));
%     V=reshape(V,[1 100*100]);
%     ValidationImage(j,:)=V;
% end


%  ValidatingImages=ValidationImage;

#  Then I do normalization of the validation images too

% % Normalization of the Validation images
% for i=1:size(ValidationImage,1)
%     minimum=min(ValidationImage(i,:));
%     maximum=max(ValidationImage(i,:));
%     ValidationImage(i,:)=(ValidationImage(i,:)-minimum)*255/(maximum-minimum);
% end;


# I subtract the mean training image from the validation images

% % Subtracting the mean from the ValidationImage

%  for i=1:size(ValidationImage,1)
%    ValidationImage(i,:)=ValidationImage(i,:)-meanImage;
%     end

# then I project each of the validation image onto the eigenface space and then we calculate the euclidean distance of the 
# training image from the validation image

% % %%% Projecting Validation vectors on to eigenface space
%%euclidean distance  
% for i=1:size(ValidationImage,1);
%     ValidationProjectedOntoPrinComp=ValidationImage(i,:) * eigenVectors  ;
%     euclideanSimilarity=arrayfun(@(func) norm(TrainingProjectedOntoPrinComp(func,:)-ValidationProjectedOntoPrinComp),1:size(A,1));
%     %% check for minimum distance
%     [Score(i),IndexOfTrainImage(i)]=min(euclideanSimilarity);
%     [S,Q]=sort(euclideanSimilarity);
%     
%     Indices(i,:)=Q(1:3);
% 
% end

# As I want to try for 1 nearest neighbour and 3 nearest neighbour so I keep the indices of 3 training images which are closest to the 
# validation image in the 25 dimensional eigenvector space

# I check for 1NN
# By showing the image which is closest to the validation image

%%%%checking for 1 nearest neighbour
% for i=1:size(ValidatingImages,1)
% j=0;
% figure(i);
% 
% 
% subplot(2,1,1);
% imshow(uint8(reshape(ValidatingImages(i,:),[100,100])));
% title('Validation Image')
% 
% 
% 
% 
% subplot(2,1,2)
% imshow(uint8(reshape(trainingImages(IndexOfTrainImage(i),:),[100,100])));
% title('Training Image Recognized');
% end

# Here I got 23 out of 24 images identified correctly


# Now I check for 3 NN

%%%checking for 3 nearest neighbour
% for i=1:size(ValidationImage,1)
% j=0;
% figure(i);
% 
% j=j+1;
% subplot(4,1,1);
% imshow(uint8(reshape(ValidatingImages(i,:),[100,100])));
% title('Validation Image')
% 
% j=j+1;
% 
% for z=1:3,
%     subplot(4,1,z+1)
% imshow(uint8(reshape(trainingImages(Indices(i,z),:),[100,100])));
% title('Training Image Recognized');
% end
% end
% 

### Here I got 22 out 24 images correctly identified


# So i go for 1 Nearest Neighbour model to test the tesing images


# I resize the testing images      

% g=dir('G:\DataMiningData\Dataset\TestSet\*.jpg');
% for j=1:numel(g);
%     T=double(imread(g(j).name));
%     T=reshape(T,[1 100*100]);
%     testImage(j,:)=T;
% end
%  testingImages=testImage;

# Then the testing images were normalized

% % % Normalization of the test images
% for i=1:size(testImage,1)
%     minimum=min(testImage(i,:));
%     maximum=max(testImage(i,:));
%     testImage(i,:)=(testImage(i,:)-minimum)*255/(maximum-minimum);
% end;

# The mean training image is then subtracted from the test images 

%  for i=1:size(testImage,1)
%    testImage(i,:)=testImage(i,:)-meanImage;
%     end
% % 

# Then the each of the test image was then projected onto the 25 dimensional eigenvector space
#  And the euclidean distance is then calculated from each of the training image

% % %%% Projecting test vectors on to eigenface space
% 
% % euclidean distance
% for i=1:size(testImage,1);
%     TestProjectedOntoPrinComp=testImage(i,:) * eigenVectors  ;
%     euclideanSimilarity=arrayfun(@(func) norm(TrainingProjectedOntoPrinComp(func,:)-TestProjectedOntoPrinComp),1:size(A,1));
%     %% check for minimum distance
%     [Score(i),IndexOfTrainImages(i)]=min(euclideanSimilarity);
%     
% 
% end

# Then I dislplay the training image that is nearest to the testing image
% 
% % 
for i=1:size(testImage,1)
j=0;
figure(i);


subplot(2,1,1);
imshow(uint8(reshape(testingImages(i,:),[100,100])));
title('Testing Image')




subplot(2,1,2)
imshow(uint8(reshape(trainingImages(IndexOfTrainImages(i),:),[100,100])));
title('Training Image Recognized');
end

# Here I get 24 out 24 images identified correct



